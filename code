#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int fv[11], fvs[11];
int vec[11] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

vector<int> stam;

int n, stampilaMin = 100001, stampila;

bool douaS(int n){
    int stampile = 0;
    
    for(int i = 0; i < 10; i ++){
        fvs[i] = 0;
    }
    
    while(n > 0){
        fvs[n % 10] ++;
        n /= 10;
    }  
    
    for(int i = 0; i < 10; i ++){
        if(fvs[i] > 0){
            stampile ++;
        }
        
        if(stampile > 2){
            return false;
        }
    }
    
    if(stampile == 2){
        return true;
    }
    
    return false;
}

int main()
{
    cin >> n;

    for (int i = 0; i < n; i++){
        int m;
        
        cin >> m;
        
        if(douaS(m) == true){
            stam.emplace_back(m);
        }

        while (m > 0) {
            fv[m % 10]++;
            m /= 10;
        }
    }

    for(int i = 0; i < 10; i ++){
        if(fv[i] < stampilaMin){
            stampilaMin = fv[i];
            stampila = i;
        }
        
        for(int j = i + 1; j < 10; j ++){
            if(fv[i] < fv[j]){
                swap(vec[i], vec[j]);
                swap(fv[i], fv[j]);
            }
            else if(fv[i] == fv[j]){
                if(vec[i] < vec[j]){
                    swap(vec[i], vec[j]);
                }
            }
        }
    }
    
    cout << stampila << '\n';
    
    for(int i = 0; i < 10; i ++){
        cout << vec[i] << ' ';
    }
    
    cout << '\n';
    
    if(stam.empty()){
        cout << -1;
        return 0;
    }
    
    sort(stam.begin(), stam.end());
    
    for(const auto& i : stam){
        cout << i << ' ';
    }
    
    return 0;
}
